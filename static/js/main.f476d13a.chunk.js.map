{"version":3,"sources":["services/api.ts","services/weather-api.ts","hooks/useRequestOfficeWeather.ts","services/flights-api.ts","hooks/useRequestOfficeFlights.ts","hooks/useBestOffice.ts","components/results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cache","setupCache","maxAge","axiosSetup","apiURL","baseURL","headers","Accept","adapter","DEFAULT_PARAMS","params","apikey","process","metric","apiClient","axios","create","getCityFiveDaysForecast","cityId","get","initialState","loading","error","data","useRequestOfficeWeather","useState","setReturn","a","prevState","responseAms","responseMad","responseBud","rawData","location","forecast","sortedBySeverityData","sort","cityForecastDataA","cityForecastDataB","Headline","Severity","getLocalAirport","lat","long","radius","type","locale","location_types","limit","active_only","lon","currentLocation","useRequestOfficeFlights","requestLatLong","Promise","resolve","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","findFlights","currentLocationCode","max_stops","city","code","map","onlyFlightsResponseData","startDate","Date","startDateParameter","format","endDate","add","days","endDateParameter","fromAirportCode","toAirportCode","dateFrom","dateTo","stops","flyFrom","to","partner","v","max_stopovers","flight_type","flightsResponse","flightsFound","filter","flight","availability","seats","id","dTime","price","fly_duration","deep_link","date","fromUnixTime","duration","deepLink","flights","currentLocationAirports","locations","currentLocationAirport","all","name","result","useBestOffice","setResult","requestForecast","loadingForecast","errorForecast","requestFlights","loadingFlights","errorFlights","loadForecast","loadFlights","useEffect","finalResult","officeName","forecastByCity","f","DailyForecasts","flightsByCity","processedResults","EpochDate","flightsByDate","Temperature","Maximum","Minimum","day","text","Day","IconPhrase","icon","Icon","night","Night","temperature","minimum","Value","maximum","unit","Unit","isCurrentLocation","toLowerCase","results","FlightsResults","className","key","href","target","WeatherIcon","title","alt","src","Results","office","isCurrentLocationClassName","App","request","preferences","setPreferences","onChange","event","stopsCount","parseInt","value","onClick","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.f476d13a.chunk.js","sourcesContent":["import { setupCache } from \"axios-cache-adapter\"\n\nconst cache = setupCache({\n  maxAge: 15 * 60 * 1000\n});\n\nexport function axiosSetup(apiURL: string) {\n  return {\n    baseURL: apiURL,\n    headers: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      \"Content-type\": \"application/json; charset=UTF-8\",\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      Accept: \"application/json\",\n    },\n    adapter: cache.adapter,\n  }\n}\n","import axios from \"axios\";\n\nimport { axiosSetup } from \"./api\";\n\nconst API_URL = \"https://dataservice.accuweather.com\";\nconst DEFAULT_PARAMS = {\n  params: {\n    apikey: process.env.REACT_APP_WEATHER_API_KEY,\n    metric: true,\n  }\n};\n\nconst apiClient = axios.create(axiosSetup(API_URL));\n\nexport const getCityFiveDaysForecast = (cityId: number) =>\n  apiClient.get<any>(`/forecasts/v1/daily/5day/${cityId}`, DEFAULT_PARAMS);\n","import { useState } from \"react\";\n\nimport { getCityFiveDaysForecast } from \"../services/weather-api\";\n\nexport const AMSTERDAM = 249758;\nexport const MADRID = 308526;\nexport const BUDAPEST = 187423;\n\n// The Promise and AxiosResponse content should be specific the endpoint. Skipping just to sabe time for now\ntype ApiRequest = () => Promise<any>;\n\ninterface ApiRequestHookState {\n  loading: boolean;\n  error: Error | null;\n  data: any | null,\n}\n\ntype ApiRequestHookReturn = [\n  ApiRequest,\n  ApiRequestHookState,\n];\n\nconst initialState: ApiRequestHookState = {\n  loading: false,\n  error: null,\n  data: null,\n};\n\n// Possible improvement: This could get an array of desirable cities to gether the weather\nfunction useRequestOfficeWeather(): ApiRequestHookReturn {\n  const [{ data, loading, error }, setReturn] = useState(initialState);\n\n  async function request() {\n    try {\n      setReturn((prevState) => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      const responseAms: any | null = await getCityFiveDaysForecast(AMSTERDAM);\n      const responseMad: any | null = await getCityFiveDaysForecast(MADRID);\n      const responseBud: any | null = await getCityFiveDaysForecast(BUDAPEST);\n\n      const rawData = [\n        { location: \"Amsterdam\", forecast: responseAms.data },\n        { location: \"Madrid\", forecast: responseMad.data },\n        { location: \"Budapest\", forecast: responseBud.data }\n      ];\n\n      // https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/daily/5day/%7BlocationKey%7D\n      // The lower the number, the greater the severity\n      // So we sort Descending. The first is the best weather.\n      const sortedBySeverityData = rawData.sort((cityForecastDataA, cityForecastDataB) => {\n        return cityForecastDataB.forecast.Headline.Severity - cityForecastDataA.forecast.Headline.Severity;\n      });\n\n      setReturn((prevState) => ({\n        ...prevState,\n        data: sortedBySeverityData,\n        loading: false,\n      }));\n    } catch (error) {\n      setReturn((prevState) => ({\n        ...prevState,\n        error: error,\n        loading: false,\n      }));\n    }\n  }\n\n  return [request, { data, loading, error }];\n}\n\nexport default useRequestOfficeWeather;\n","import axios from \"axios\";\n\nimport { axiosSetup } from \"./api\";\n\nconst API_URL = \"https://api.skypicker.com/\";\n\nconst apiClient = axios.create(axiosSetup(API_URL));\n\n// Default to Amsterdam lat / long\nexport const getLocalAirport = (lat: number, long: number) =>\n  apiClient.get<any>(`/locations`, {\n    params: {\n      radius: 50,\n      type: \"radius\",\n      locale: \"en-US\",\n      location_types: \"airport\",\n      limit: 10,\n      active_only: true,\n      sort: \"name\",\n      lat: lat,\n      lon: long,\n    }\n  });\n\nexport const getFlightsFrom = (fromAirportCode: string, toAirportCode: string, dateFrom: string, dateTo: string, stops: number) =>\n  apiClient.get<any>(`/flights`, {\n    params: {\n      flyFrom: fromAirportCode,\n      to: toAirportCode,\n      dateFrom: dateFrom,\n      dateTo: dateTo,\n      partner: \"picky\",\n      v: 3,\n      max_stopovers: stops,\n      sort: \"price\",\n      flight_type: \"oneway\",\n      limit: 10,\n    }\n  });\n","import { useState } from \"react\";\nimport { add, format, fromUnixTime } from 'date-fns'\n\nimport { getFlightsFrom, getLocalAirport } from \"../services/flights-api\";\n\ntype FlightResponse = any;\n\nexport interface Flight {\n  id: string;\n  date: string;\n  price: number;\n  duration: string;\n  deepLink: string;\n  availability: {\n    seats: number;\n  };\n};\n\n// The Promise and AxiosResponse content should be specific the endpoint. Skipping just to sabe time for now\ntype ApiRequest = (max_stops: number) => Promise<any>;\n\ninterface ApiRequestHookState {\n  loading: boolean;\n  error: Error | null;\n  data: any | null;\n  currentLocation: string | null;\n}\n\ntype ApiRequestHookReturn = [\n  ApiRequest,\n  ApiRequestHookState,\n];\n\nconst initialState: ApiRequestHookState = {\n  loading: false,\n  error: null,\n  data: null,\n  currentLocation: null,\n};\n\nfunction useRequestOfficeFlights(): ApiRequestHookReturn {\n  const [{ data, currentLocation, loading, error }, setReturn] = useState(initialState);\n\n  async function requestLatLong(): Promise<{ latitude: number, longitude: number }> {\n    return new Promise(resolve => {\n      navigator.geolocation.getCurrentPosition(function({ coords }: any){\n        const { latitude, longitude } = coords;\n        resolve({ latitude, longitude });\n      })\n    });\n  }\n\n  function findFlights(currentLocationCode: string, max_stops: number) {\n    const citiesToBeSearched = [\n      { city: \"Amsterdam\", code: \"AMS\" },\n      { city: \"Madrid\", code: \"MAD\" },\n      { city: \"Budapest\", code: \"BUD\" },\n    ];\n\n    // This could be improved my avoiding the mutation of the variable flightsToCity. I'm not doing it now to save time.\n    return citiesToBeSearched.map(async ({ city, code }) => {\n      let onlyFlightsResponseData = [];\n\n      const startDate = new Date();\n      const startDateParameter = format(startDate, \"dd/MM/yyyy\");\n      const endDate = add(startDate, { days: 4 });\n      const endDateParameter = format(endDate, \"dd/MM/yyyy\");\n\n      if (currentLocationCode !== code) {\n        const flightsResponse = await getFlightsFrom(currentLocationCode, code, startDateParameter, endDateParameter, max_stops);\n        onlyFlightsResponseData = flightsResponse.data.data;\n      }\n\n      const flightsFound = onlyFlightsResponseData\n        .filter((flight: any) => flight.availability.seats !== null)\n        .map(({\n          id,\n          dTime,\n          price,\n          fly_duration,\n          availability,\n          deep_link,\n        }: FlightResponse) => ({\n          id,\n          date: format(fromUnixTime(dTime), \"dd/MM/yyyy\"),\n          price,\n          duration: fly_duration,\n          availability,\n          deepLink: deep_link,\n        }));\n\n      return { location: city, flights: flightsFound };\n    });\n  }\n\n  async function request(max_stops: number) {\n    try {\n      setReturn((prevState) => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      const coords = await requestLatLong();\n      const currentLocationAirports: any = await getLocalAirport(coords.latitude, coords.longitude);\n\n      // TODO: Manage error\n      const { data: { locations } } = currentLocationAirports;\n      const currentLocationAirport = locations[0];\n\n      const flights = await Promise.all(findFlights(currentLocationAirport.code, max_stops))\n\n      setReturn((prevState) => ({\n        ...prevState,\n        currentLocation: currentLocationAirport.city.name,\n        data: flights,\n        loading: false,\n      }));\n    } catch (error) {\n      setReturn((prevState) => ({\n        ...prevState,\n        error: error,\n        loading: false,\n      }));\n    }\n  }\n\n  return [request, { data, currentLocation, loading, error }];\n}\n\nexport default useRequestOfficeFlights;\n","import { useState, useEffect } from \"react\";\nimport { format, fromUnixTime } from 'date-fns'\n\nimport useRequestOfficeWeather from \"./useRequestOfficeWeather\";\nimport useRequestOfficeFlights from \"./useRequestOfficeFlights\";\nimport { Flight } from \"./useRequestOfficeFlights\";\n\nexport interface FinalResult {\n  location: string;\n  isCurrentLocation: boolean;\n  results: OfficeResults;\n}\n\nexport interface OfficeResults {\n  date: string;\n  day: {\n    text: string;\n    icon: string;\n  };\n  night: {\n    text: string;\n    icon: string;\n  };\n  temperature: {\n    minimum: number,\n    maximum: number,\n    unit: string,\n  };\n  flights: Flight[];\n};\n\ninterface HookState {\n  result: FinalResult[] | null,\n  loading: boolean,\n  error: Error | null,\n}\n\ntype HookReturn = [\n  (max_stops: number) => void,\n  HookState\n];\n\nconst initialState: HookState = {\n  result: null,\n  loading: false,\n  error: null,\n};\n\nfunction useBestOffice(): HookReturn {\n  const [ { result, loading, error }, setResult ] = useState(initialState);\n\n  const [ requestForecast, { data: forecast, loading: loadingForecast, error: errorForecast } ] = useRequestOfficeWeather();\n  const [ requestFlights, { data: flights, currentLocation, loading: loadingFlights, error: errorFlights } ] = useRequestOfficeFlights();\n\n  async function loadForecast() {\n    if (!loadingForecast && !errorForecast) {\n      await requestForecast();\n    }\n  }\n\n  async function loadFlights(max_stops: number) {\n    if (!loadingFlights && !errorFlights) {\n      await requestFlights(max_stops);\n    }\n  }\n\n  useEffect(\n    function processWeatherAndFlights() {\n      if (forecast && flights) {\n        const finalResult: FinalResult[] = [\"Amsterdam\", \"Budapest\", \"Madrid\"].map((officeName: string) => {\n          const forecastByCity = forecast.filter((f: any) => f.location === officeName)[0].forecast.DailyForecasts;\n          const flightsByCity = flights.filter((flight: any) => flight.location === officeName)[0].flights;\n\n          const processedResults = forecastByCity.map((forecast: any) => {\n            const date = format(fromUnixTime(forecast.EpochDate), \"dd/MM/yyyy\");\n            const flightsByDate = flightsByCity.filter((flight: any) => flight.date === date);\n            const { Maximum, Minimum } = forecast.Temperature;\n\n            return {\n              date: date,\n              day: {\n                text: forecast.Day.IconPhrase,\n                icon: forecast.Day.Icon,\n              },\n              night: {\n                text: forecast.Night.IconPhrase,\n                icon: forecast.Night.Icon,\n              },\n              temperature: {\n                minimum: Minimum.Value,\n                maximum: Maximum.Value,\n                unit: Maximum.Unit,\n              },\n              flights: flightsByDate,\n            }\n          });\n\n          const isCurrentLocation = currentLocation ? (currentLocation.toLowerCase() === officeName.toLowerCase()) : false;\n\n          return {\n            location: officeName,\n            results: processedResults,\n            isCurrentLocation,\n          }\n        });\n\n        setResult((prevState) => ({\n          ...prevState,\n          result: finalResult,\n          loading: false,\n        }));\n      }\n    },\n    [currentLocation, forecast, flights]\n  );\n\n  async function request(max_stops: number) {\n    try {\n      setResult((prevState) => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      await loadForecast();\n      await loadFlights(max_stops);\n    } catch (error) {\n      setResult((prevState) => ({\n        ...prevState,\n        error: error,\n        loading: false,\n      }));\n    }\n  }\n\n  return [request, { result, loading: (loading || loadingFlights || loadingForecast), error }];\n}\n\nexport default useBestOffice;\n","import React from \"react\";\n\nimport { FinalResult, OfficeResults } from \"../hooks/useBestOffice\";\nimport { Flight } from \"../hooks/useRequestOfficeFlights\";\n\nimport \"./results.scss\";\n\ninterface ResultsProps {\n  loading: boolean;\n  result: FinalResult[] | null;\n};\n\nfunction FlightsResults({ flights }: {flights: Flight[]}) {\n  if (!flights) {\n    return (<div>No flights found.</div>);\n  }\n\n  return (\n    <div className=\"flights\">\n      {flights.map((flight: Flight) => (\n        <div key={flight.id} className=\"flight-info\">\n          <div className=\"flight-info-detail\"><em>Price:</em> ${flight.price}</div>\n          <div className=\"flight-info-detail\"><em>Duration:</em> {flight.duration}</div>\n          <div className=\"flight-info-detail\"><em>Available seats:</em> {flight.availability.seats}</div>\n          <div className=\"flight-info-detail\">{flight.deepLink && <a className=\"book-flight-link\" href={flight.deepLink} target=\"_new\">Book flight</a>}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction WeatherIcon({ id, title }: { id: string, title: string }) {\n  return (\n    <img className=\"weather-icon\" title={title} alt={title} src={`https://www.accuweather.com/images/weathericons/${id}.svg`} />\n  );\n}\n\nfunction Results({ result, loading }: ResultsProps) {\n  if (!result || loading) {\n    return (\n      <section className=\"results loading\">\n        Loading...\n      </section>\n    );\n  }\n\n  return (\n    <section className=\"results\">\n      {result.map((office: any) => {\n        const isCurrentLocationClassName = office.isCurrentLocation ? \"current-location\" : \"\";\n\n        return (\n          <div key={office.location} className={`office-result ${isCurrentLocationClassName}`}>\n            <h2>{office.location}</h2>\n\n            <section className=\"office-results\">\n              {office.results.map((result: OfficeResults) => (\n                <div key={result.date} className=\"day\">\n                  <div className=\"date\">{result.date}</div>\n                  <div className=\"day-forecast\"><WeatherIcon id={result.day.icon} title={result.day.text} /></div>\n                  <div className=\"night-forecast\"><WeatherIcon id={result.night.icon} title={result.night.text} /></div>\n                  <div className=\"temp-forecast\">\n                    <div>{result.temperature.maximum}°</div>\n                    <div>{result.temperature.minimum}°</div>\n                  </div>\n                  {!office.isCurrentLocation && <FlightsResults flights={result.flights} />}\n                </div>\n              ))}\n            </section>\n\n            {office.isCurrentLocation && <p className=\"disclaimer\">Not showing flights for your current location</p>}\n          </div>\n        )\n      })}\n    </section>\n  );\n}\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\n\nimport useBestOffice from \"./hooks/useBestOffice\";\nimport Results from \"./components/results\";\n\nimport './App.scss';\n\ninterface MainState {\n  max_stops: number;\n}\n\nconst initialState: MainState = {\n  max_stops: 0,\n};\n\nfunction App() {\n  const [ request, { result, loading, error } ] = useBestOffice();\n  const [ preferences, setPreferences ] = useState(initialState);\n\n  useEffect(\n    function loadBestOffice() {\n      if (!result && !loading && !error) {\n        request(preferences.max_stops);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ preferences, result, loading, error ]\n  );\n\n  function updatePreferences(stopsCount: number) {\n    setPreferences(prevState => ({\n      ...prevState,\n      max_stops: stopsCount,\n    }));\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"preferences\">\n        <label>Number of stops:</label>\n        <input type=\"number\" onChange={event => updatePreferences(parseInt(event.target.value))} value={preferences.max_stops} />\n        <button onClick={() => request(preferences.max_stops)}>Update search</button>\n      </div>\n      <Results result={result} loading={loading} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}