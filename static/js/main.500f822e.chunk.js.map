{"version":3,"sources":["services/api.ts","services/weather-api.ts","hooks/useRequestOfficeWeather.ts","services/flights-api.ts","hooks/useRequestOfficeFlights.ts","hooks/useBestOffice.ts","components/results.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cache","setupCache","maxAge","axiosSetup","apiURL","baseURL","headers","Accept","adapter","DEFAULT_PARAMS","params","apikey","process","metric","apiClient","axios","create","getCityFiveDaysForecast","cityId","get","initialState","loading","data","useRequestOfficeWeather","useState","setReturn","a","prevState","responseAms","responseMad","responseBud","rawData","location","forecast","sortedBySeverityData","sort","cityForecastDataA","cityForecastDataB","Headline","Severity","getLocalAirport","lat","long","radius","type","locale","location_types","limit","active_only","lon","currentLocation","useRequestOfficeFlights","requestLatLong","Promise","resolve","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","findFlights","currentLocationCode","max_stops","city","code","map","onlyFlightsResponseData","startDate","Date","startDateParameter","format","endDate","add","days","endDateParameter","fromAirportCode","toAirportCode","dateFrom","dateTo","stops","flyFrom","to","partner","v","max_stopovers","flight_type","flightsResponse","flightsFound","filter","flight","availability","seats","id","dTime","price","fly_duration","deep_link","route","date","fromUnixTime","duration","deepLink","length","flights","currentLocationAirports","locations","currentLocationAirport","all","name","result","error","useBestOffice","setResult","requestForecast","loadingForecast","requestFlights","loadingFlights","loadForecast","loadFlights","processResultByOfficeCallback","useCallback","forecastByCity","flightsByCity","EpochDate","flightsByDate","Temperature","Maximum","Minimum","day","text","Day","IconPhrase","icon","Icon","night","Night","temperature","minimum","Value","maximum","unit","Unit","mapResultByOfficeCallback","officeName","f","DailyForecasts","processedResultsByOffice","isCurrentLocation","toLowerCase","results","useEffect","finalResult","FlightsResults","className","key","href","target","WeatherIcon","title","finalTitle","alt","src","Results","office","isCurrentLocationClassName","App","request","preferences","setPreferences","onChange","event","stopsCount","parseInt","value","onClick","message","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.500f822e.chunk.js","sourcesContent":["import { setupCache } from \"axios-cache-adapter\"\n\nconst cache = setupCache({\n  maxAge: 15 * 60 * 1000\n});\n\nexport function axiosSetup(apiURL: string) {\n  return {\n    baseURL: apiURL,\n    headers: {\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      \"Content-type\": \"application/json; charset=UTF-8\",\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      Accept: \"application/json\",\n    },\n    adapter: cache.adapter,\n  }\n}\n","import axios from \"axios\";\n\nimport { axiosSetup } from \"./api\";\n\nconst API_URL = \"https://dataservice.accuweather.com\";\nconst DEFAULT_PARAMS = {\n  params: {\n    apikey: process.env.REACT_APP_WEATHER_API_KEY,\n    metric: true,\n  }\n};\n\nconst apiClient = axios.create(axiosSetup(API_URL));\n\nexport const getCityFiveDaysForecast = (cityId: number) =>\n  apiClient.get<any>(`/forecasts/v1/daily/5day/${cityId}`, DEFAULT_PARAMS);\n","import { useState } from \"react\";\n\nimport { getCityFiveDaysForecast } from \"../services/weather-api\";\n\nexport const AMSTERDAM = 249758;\nexport const MADRID = 308526;\nexport const BUDAPEST = 187423;\n\n// The Promise and AxiosResponse content should be specific the endpoint. Skipping just to sabe time for now\ntype ApiRequest = () => Promise<any>;\n\ninterface ApiRequestHookState {\n  loading: boolean;\n  data: any | null,\n}\n\ntype ApiRequestHookReturn = [\n  ApiRequest,\n  ApiRequestHookState,\n];\n\nconst initialState: ApiRequestHookState = {\n  loading: false,\n  data: null,\n};\n\n// Possible improvement: This could get an array of desirable cities to gether the weather\nfunction useRequestOfficeWeather(): ApiRequestHookReturn {\n  const [{ data, loading }, setReturn] = useState(initialState);\n\n  async function request() {\n    setReturn((prevState) => ({\n      ...prevState,\n      loading: true,\n    }));\n\n    const responseAms: any | null = await getCityFiveDaysForecast(AMSTERDAM);\n    const responseMad: any | null = await getCityFiveDaysForecast(MADRID);\n    const responseBud: any | null = await getCityFiveDaysForecast(BUDAPEST);\n\n    const rawData = [\n      { location: \"Amsterdam\", forecast: responseAms.data },\n      { location: \"Madrid\", forecast: responseMad.data },\n      { location: \"Budapest\", forecast: responseBud.data }\n    ];\n\n    // https://developer.accuweather.com/accuweather-forecast-api/apis/get/forecasts/v1/daily/5day/%7BlocationKey%7D\n    // The lower the number, the greater the severity\n    // So we sort Descending. The first is the best weather.\n    const sortedBySeverityData = rawData.sort((cityForecastDataA, cityForecastDataB) => {\n      return cityForecastDataB.forecast.Headline.Severity - cityForecastDataA.forecast.Headline.Severity;\n    });\n\n    setReturn((prevState) => ({\n      ...prevState,\n      data: sortedBySeverityData,\n      loading: false,\n    }));\n  }\n\n  return [request, { data, loading }];\n}\n\nexport default useRequestOfficeWeather;\n","import axios from \"axios\";\n\nimport { axiosSetup } from \"./api\";\n\nconst API_URL = \"https://api.skypicker.com/\";\n\nconst apiClient = axios.create(axiosSetup(API_URL));\n\n// Default to Amsterdam lat / long\nexport const getLocalAirport = (lat: number, long: number) =>\n  apiClient.get<any>(`/locations`, {\n    params: {\n      radius: 50,\n      type: \"radius\",\n      locale: \"en-US\",\n      location_types: \"airport\",\n      limit: 10,\n      active_only: true,\n      sort: \"name\",\n      lat: lat,\n      lon: long,\n    }\n  });\n\nexport const getFlightsFrom = (fromAirportCode: string, toAirportCode: string, dateFrom: string, dateTo: string, stops: number) =>\n  apiClient.get<any>(`/flights`, {\n    params: {\n      flyFrom: fromAirportCode,\n      to: toAirportCode,\n      dateFrom: dateFrom,\n      dateTo: dateTo,\n      partner: \"picky\",\n      v: 3,\n      max_stopovers: stops,\n      sort: \"price\",\n      flight_type: \"oneway\",\n      limit: 10,\n    }\n  });\n","import { useState } from \"react\";\nimport { add, format, fromUnixTime } from 'date-fns'\n\nimport { getFlightsFrom, getLocalAirport } from \"../services/flights-api\";\n\ntype FlightResponse = any;\n\nexport interface Flight {\n  id: string;\n  date: string;\n  price: number;\n  duration: string;\n  deepLink: string;\n  availability: {\n    seats: number;\n  };\n  stops: number;\n};\n\n// The Promise and AxiosResponse content should be specific the endpoint. Skipping just to sabe time for now\ntype ApiRequest = (max_stops: number) => Promise<any>;\n\nexport interface FlightsByCity {\n  location: string;\n  flights: Flight[];\n};\n\ninterface ApiRequestHookState {\n  loading: boolean;\n  data: FlightsByCity[] | null;\n  currentLocation: string | null;\n}\n\ntype ApiRequestHookReturn = [\n  ApiRequest,\n  ApiRequestHookState,\n];\n\nconst initialState: ApiRequestHookState = {\n  loading: false,\n  data: null,\n  currentLocation: null,\n};\n\nfunction useRequestOfficeFlights(): ApiRequestHookReturn {\n  const [{ data, currentLocation, loading }, setReturn] = useState(initialState);\n\n  async function requestLatLong(): Promise<{ latitude: number, longitude: number }> {\n    return new Promise(resolve => {\n      navigator.geolocation.getCurrentPosition(function({ coords }: any){\n        const { latitude, longitude } = coords;\n        resolve({ latitude, longitude });\n      })\n    });\n  }\n\n  function findFlights(currentLocationCode: string, max_stops: number): Promise<FlightsByCity>[] {\n    const citiesToBeSearched = [\n      { city: \"Amsterdam\", code: \"AMS\" },\n      { city: \"Madrid\", code: \"MAD\" },\n      { city: \"Budapest\", code: \"BUD\" },\n    ];\n\n    // This could be improved my avoiding the mutation of the variable flightsToCity. I'm not doing it now to save time.\n    return citiesToBeSearched.map(async ({ city, code }) => {\n      let onlyFlightsResponseData = [];\n\n      const startDate = new Date();\n      const startDateParameter = format(startDate, \"dd/MM/yyyy\");\n      const endDate = add(startDate, { days: 4 });\n      const endDateParameter = format(endDate, \"dd/MM/yyyy\");\n\n      if (currentLocationCode !== code) {\n        const flightsResponse = await getFlightsFrom(currentLocationCode, code, startDateParameter, endDateParameter, max_stops);\n        onlyFlightsResponseData = flightsResponse.data.data;\n      }\n\n      const flightsFound = onlyFlightsResponseData\n        .filter((flight: any) => flight.availability.seats !== null)\n        .map(({\n          id,\n          dTime,\n          price,\n          fly_duration,\n          availability,\n          deep_link,\n          route,\n        }: FlightResponse): Flight => ({\n          id,\n          date: format(fromUnixTime(dTime), \"dd/MM/yyyy\"),\n          price,\n          duration: fly_duration,\n          availability,\n          deepLink: deep_link,\n          stops: route.length - 1,\n        }));\n\n      return { location: city, flights: flightsFound };\n    });\n  }\n\n  async function request(max_stops: number) {\n    setReturn((prevState) => ({\n      ...prevState,\n      loading: true,\n    }));\n\n    const coords = await requestLatLong();\n    const currentLocationAirports: any = await getLocalAirport(coords.latitude, coords.longitude);\n\n    // TODO: Manage error\n    const { data: { locations } } = currentLocationAirports;\n    const currentLocationAirport = locations[0];\n\n    const flights = await Promise.all(findFlights(currentLocationAirport.code, max_stops))\n\n    setReturn((prevState) => ({\n      ...prevState,\n      currentLocation: currentLocationAirport.city.name,\n      data: flights,\n      loading: false,\n    }));\n  }\n\n  return [request, { data, currentLocation, loading }];\n}\n\nexport default useRequestOfficeFlights;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { format, fromUnixTime } from 'date-fns'\n\nimport useRequestOfficeWeather from \"./useRequestOfficeWeather\";\nimport useRequestOfficeFlights from \"./useRequestOfficeFlights\";\nimport { Flight, FlightsByCity } from \"./useRequestOfficeFlights\";\n\ntype DailyForecast = any;\n\nexport interface FinalResult {\n  location: string;\n  isCurrentLocation: boolean;\n  results: OfficeResults;\n}\n\nexport interface OfficeResults {\n  date: string;\n  day: {\n    text: string;\n    icon: string;\n  };\n  night: {\n    text: string;\n    icon: string;\n  };\n  temperature: {\n    minimum: number,\n    maximum: number,\n    unit: string,\n  };\n  flights: Flight[];\n};\n\ninterface HookState {\n  result: FinalResult[] | null,\n  loading: boolean,\n  error: Error | null,\n}\n\ntype HookReturn = [\n  (max_stops: number) => void,\n  {\n    result: FinalResult[] | null,\n    loading: boolean,\n    loadingForecast: boolean,\n    loadingFlights: boolean,\n    error: Error | null,\n  }\n];\n\nconst initialState: HookState = {\n  result: null,\n  loading: false,\n  error: null,\n};\n\nfunction useBestOffice(): HookReturn {\n  const [ { result, loading, error }, setResult ] = useState(initialState);\n\n  const [ requestForecast, { data: forecast, loading: loadingForecast } ] = useRequestOfficeWeather();\n  const [ requestFlights, { data: flights, currentLocation, loading: loadingFlights } ] = useRequestOfficeFlights();\n\n  async function loadForecast() {\n    if (!loadingForecast) {\n      await requestForecast();\n    }\n  }\n\n  async function loadFlights(max_stops: number) {\n    if (!loadingFlights) {\n      await requestFlights(max_stops);\n    }\n  }\n\n  // Saving time here. I should create types for this\n  const processResultByOfficeCallback = useCallback(\n    function processResultByOffice(forecastByCity: DailyForecast, flightsByCity: any): OfficeResults {\n      return forecastByCity.map((forecast: any) => {\n        const date = format(fromUnixTime(forecast.EpochDate), \"dd/MM/yyyy\");\n        const flightsByDate = flightsByCity.filter((flight: any) => flight.date === date);\n        const { Maximum, Minimum } = forecast.Temperature;\n\n        return {\n          date: date,\n          day: {\n            text: forecast.Day.IconPhrase,\n            icon: forecast.Day.Icon,\n          },\n          night: {\n            text: forecast.Night.IconPhrase,\n            icon: forecast.Night.Icon,\n          },\n          temperature: {\n            minimum: Minimum.Value,\n            maximum: Maximum.Value,\n            unit: Maximum.Unit,\n          },\n          flights: flightsByDate,\n        }\n      })\n    },\n    []\n  );\n\n  const mapResultByOfficeCallback = useCallback(\n    function mapResultByOffice(officeName: string, forecast: DailyForecast[], flights: FlightsByCity[]) {\n      const forecastByCity = forecast.filter((f: DailyForecast) => f.location === officeName)[0].forecast.DailyForecasts;\n      const flightsByCity = flights.filter((flight: FlightsByCity) => flight.location === officeName)[0].flights;\n      const processedResultsByOffice = processResultByOfficeCallback(forecastByCity, flightsByCity);\n      const isCurrentLocation = currentLocation ? (currentLocation.toLowerCase() === officeName.toLowerCase()) : false;\n\n      return {\n        location: officeName,\n        results: processedResultsByOffice,\n        isCurrentLocation,\n      }\n    },\n    [processResultByOfficeCallback, currentLocation]\n  );\n\n  useEffect(\n    function processWeatherAndFlights() {\n      if (forecast && flights) {\n        const finalResult: FinalResult[] = [\"Amsterdam\", \"Budapest\", \"Madrid\"].map((officeName: string) => mapResultByOfficeCallback(officeName, forecast, flights));\n\n        setResult((prevState) => ({\n          ...prevState,\n          result: finalResult,\n          loading: false,\n        }));\n      }\n    },\n    [mapResultByOfficeCallback, currentLocation, forecast, flights]\n  );\n\n  async function request(max_stops: number) {\n    try {\n      setResult((prevState) => ({\n        ...prevState,\n        loading: true,\n      }));\n\n      await loadForecast();\n      await loadFlights(max_stops);\n    } catch (error) {\n      setResult((prevState) => ({\n        ...prevState,\n        error: error,\n        loading: false,\n      }));\n    }\n  }\n\n  return [request, { result, loading, loadingFlights, loadingForecast, error }];\n}\n\nexport default useBestOffice;\n","import React from \"react\";\n\nimport { FinalResult, OfficeResults } from \"../hooks/useBestOffice\";\nimport { Flight } from \"../hooks/useRequestOfficeFlights\";\n\nimport \"./results.scss\";\n\ninterface ResultsProps {\n  result: FinalResult[] | null;\n};\n\nfunction FlightsResults({ flights }: {flights: Flight[]}) {\n  if (!flights) {\n    return (<div>No flights found.</div>);\n  }\n\n  return (\n    <div className=\"flights\">\n      {flights.map((flight: Flight) => (\n        <div key={flight.id} className=\"flight-info\">\n          <div className=\"flight-info-detail\"><em>Price:</em> ${flight.price}</div>\n          <div className=\"flight-info-detail\"><em>Duration:</em> {flight.duration}</div>\n          <div className=\"flight-info-detail\"><em>Available seats:</em> {flight.availability.seats}</div>\n          <div className=\"flight-info-detail\"><em>Stops:</em> {flight.stops}</div>\n          <div className=\"flight-info-detail\">{flight.deepLink && <a className=\"book-flight-link\" href={flight.deepLink} target=\"_new\">Book flight</a>}</div>\n        </div>\n      ))}\n    </div>\n  );\n}\n\nfunction WeatherIcon({ id, title, day }: { id: string, title: string, day: boolean }) {\n  const finalTitle = `${title} during the ${day ? 'day' : 'night'}.`;\n\n  return (\n    <img className=\"weather-icon\" title={finalTitle} alt={finalTitle} src={`https://www.accuweather.com/images/weathericons/${id}.svg`} />\n  );\n}\n\nfunction Results({ result }: ResultsProps) {\n  return (\n    <section className=\"results\">\n      {result && result.map((office: any) => {\n        const isCurrentLocationClassName = office.isCurrentLocation ? \"current-location\" : \"\";\n\n        return (\n          <div key={office.location} className={`office-result ${isCurrentLocationClassName}`}>\n            <h2>{office.location}</h2>\n\n            <section className=\"office-results\">\n              {office.results.map((result: OfficeResults) => (\n                <div key={result.date} className=\"day\">\n                  <div className=\"date\">{result.date}</div>\n                  <div className=\"day-forecast\"><WeatherIcon id={result.day.icon} title={result.day.text} day={true} /></div>\n                  <div className=\"night-forecast\"><WeatherIcon id={result.night.icon} title={result.night.text} day={false} /></div>\n                  <div className=\"temp-forecast\">\n                    <div>{result.temperature.maximum}°</div>\n                    <div>{result.temperature.minimum}°</div>\n                  </div>\n                  {!office.isCurrentLocation && <FlightsResults flights={result.flights} />}\n                </div>\n              ))}\n            </section>\n\n            {office.isCurrentLocation && <p className=\"disclaimer\">Not showing flights for your current location</p>}\n          </div>\n        )\n      })}\n    </section>\n  );\n}\n\nexport default Results;\n","import React, { useEffect, useState } from 'react';\n\nimport useBestOffice from \"./hooks/useBestOffice\";\nimport Results from \"./components/results\";\n\nimport './App.scss';\n\ninterface MainState {\n  max_stops: number;\n}\n\nconst initialState: MainState = {\n  max_stops: 0,\n};\n\nfunction App() {\n  const [ request, { result, loading, loadingForecast, loadingFlights, error } ] = useBestOffice();\n  const [ preferences, setPreferences ] = useState(initialState);\n\n  useEffect(\n    function loadBestOffice() {\n      if (!result && !loading && !error) {\n        request(preferences.max_stops);\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [ preferences, result, loading, error ]\n  );\n\n  function updatePreferences(stopsCount: number) {\n    setPreferences(prevState => ({\n      ...prevState,\n      max_stops: stopsCount,\n    }));\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"preferences\">\n        <label>Number of stops:</label>\n        <input type=\"number\" onChange={event => updatePreferences(parseInt(event.target.value))} value={preferences.max_stops} />\n        <button onClick={() => request(preferences.max_stops)}>Update search</button>\n      </div>\n      {error && <section className=\"results main-msg\">{error.message}</section>}\n      {!error && (loading || loadingForecast || loadingFlights) && (\n        <section className=\"results main-msg\">\n          {loading && !loadingFlights && !loadingForecast && <span>Loading...</span>}\n          {loadingForecast && <span>Looking up for the weather...</span>}\n          {loadingFlights && <span>Finding cheap flight tickets...</span>}\n        </section>\n      )}\n      <Results result={result} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}